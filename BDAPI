"""
добавить в Gradle
dependencies {
      compile 'org.mongodb:mongodb-driver-sync:3.12.3'
  }
"""
package com.mongodb;

import com.mongodb.client.*;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;

import java.util.ArrayList;
import java.util.List;

public class DBAPI {
    private MongoClient mongoClient;
    private MongoDatabase database;
    private MongoCollection<Document> collectionPerson;
    private MongoCollection<Document> collectionCar;
    private MongoCollection<Document> collectionOrganization;
    private MongoCollection<Document> collectionToWhom;

    DBAPI(){
        mongoClient = MongoClients.create(
                "mongodb+srv://Ivan:1234@testcluster-nzn6w.mongodb.net/test?retryWrites=true&w=majority");

        database = mongoClient.getDatabase("Test");

        collectionPerson = database.getCollection("Person");
        collectionCar = database.getCollection("Car");
        collectionOrganization = database.getCollection("Organization");
        collectionToWhom = database.getCollection("ToWhom");
    }

    public List<Document>  getPersons() {
        List<Document> findPersonList = collectionPerson.find(new Document()).into(new ArrayList<>());
        for (Document person : findPersonList) {
            System.out.println(person.toJson());
        }
        return findPersonList;
    }
    public List<Document>  getCar() {
        List<Document> findCarList = collectionCar.find(new Document()).into(new ArrayList<>());
        for (Document car : findCarList) {
            System.out.println(car.toJson());
        }
        return findCarList;
    }
    public List<Document>  getOrganization() {
        List<Document> findOrganizationList = collectionOrganization.find(new Document()).into(new ArrayList<>());
        for (Document organization : findOrganizationList) {
            System.out.println(organization.toJson());
        }
        return findOrganizationList;
    }
    public List<Document>  getToWhom() {
        List<Document> findToWhomList = collectionToWhom.find(new Document()).into(new ArrayList<>());
        for (Document toWhom : findToWhomList) {
            System.out.println(toWhom.toJson());
        }
        return findToWhomList;
    }

    public void packPersonVisitor(Document person, Document organization, Document toWhom){
        ObjectId organizationId = (ObjectId) organization.get("_id");
        ObjectId toWhomId = (ObjectId) toWhom.get("_id");

        updateIdPerson(person, organizationId, toWhomId);
    }
    public void packCarVisitor(Document car, Document organization, Document toWhom){
        ObjectId organizationId = (ObjectId) organization.get("_id");
        ObjectId toWhomId = (ObjectId) toWhom.get("_id");

        updateIdCar(car, organizationId, toWhomId);
    }

    private void updateIdPerson(Document person,  ObjectId organizationId, ObjectId toWhomId){
        Bson updateInformation = new Document()
                .append("_idOrganization", organizationId)
                .append("_idToWhom", toWhomId);

        Bson updateOperation = new Document("$set", updateInformation);

        collectionPerson.updateOne(person, updateOperation);
    }

    private void updateIdCar(Document car, ObjectId organizationId, ObjectId toWhomId){
        Bson updateInformation = new Document()
                .append("_idOrganization", organizationId)
                .append("_idToWhom", toWhomId);

        Bson updateOperation = new Document("$set", updateInformation);

        collectionCar.updateOne(car, updateOperation);
    }

    public void addPerson(String name, String position, String phoneNumber, String purposeOfTheVisit,
                          String accessObject){
        Document tempDocument = new Document()
                .append("_id", new ObjectId() )
                .append("Name", name)
                .append("Position", position)
                .append("Phone number", phoneNumber)
                .append("Purpose of the visit", purposeOfTheVisit)
                .append("Access object", accessObject);

        collectionPerson.insertOne(tempDocument);
    }

    public void addCar(String carModel, String carNumber, String carOwner, String driverInformation,
                        String passengerInformation, String purposeOfTheVisit, String accessObject){
        Document tempDocument = new Document()
                .append("_id", new ObjectId() )
                .append("Model", carModel)
                .append("Car number", carNumber)
                .append("Car owner", carOwner)
                .append("Driver information", driverInformation)
                .append("Passenger information", passengerInformation)
                .append("Purpose of the visit", purposeOfTheVisit)
                .append("Access object", accessObject);

        collectionCar.insertOne(tempDocument);
    }

    public void addOrganization(String nameOfTheFirm){
        Document tempDocument = new Document()
                .append("_id", new ObjectId() )
                .append("Name of the firm", nameOfTheFirm);
        collectionOrganization.insertOne(tempDocument);
    }

    public void addToWhom(String nameToWhom, String nameDivision, String positionToWhom,
                           String phoneNumberToWhom, String floor, String room) {
        Document tempDocument = new Document()
                .append("_id", new ObjectId() )
                .append("Name", nameToWhom)
                .append("Division name", nameDivision)
                .append("To whom position", positionToWhom)
                .append("Phone number to whom", phoneNumberToWhom)
                .append("Floor", floor)
                .append("Room", room);

        collectionToWhom.insertOne(tempDocument);
    }
